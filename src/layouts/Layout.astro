---
import "@styles/global.css";
import { SEO, type SEOProps } from "astro-seo";
import animeConfig from "@configs/animeConfig";
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";

interface Props {
  seo?: SEOProps;
}

const {
  linime: { siteName, description, favicon },
} = animeConfig;

// SEO BAWAAN
const seoProps = Astro.props.seo;
const seo: SEOProps = {
  titleDefault: siteName,
  description: description,
  ...seoProps,
};
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" href={favicon} />
    <SEO {...seo} />
    
    <!-- Google AdSense Verification Script -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6082615069657035"
     crossorigin="anonymous"></script>
    
    <!-- <title>Judul Halaman | Kata Kunci Utama - Nama Situs</title> -->
  </head>
  <body
    class="font-inter relative bg-zinc-200 dark:bg-zinc-950 text-zinc-800 dark:text-zinc-50"
  >
    <!-- NAVBAR -->
    <Navbar
      navLinks={[
        {
          title: "Home",
          href: "/",
        },
        {
          title: "Ongoing",
          href: "/ongoing",
        },
        {
          title: "Completed",
          href: "/completed",
        },
        {
          title: "List Anime",
          href: "/anime",
        },
      ]}
    />

    <!-- DYNAMIC CONTENT -->
    <main id="main" class="container min-h-screen relative">
      <div id="leluhur" class="hidden flex-col gap-3">
        <slot />
      </div>

      <!-- SPINNER -->
      <div
        id="spinner-wrapper"
        class="top-0 right-8 pt-[90px] fixed flex justify-center items-center"
      >
        <span class="loader"></span>
      </div>
    </main>

    <!-- FOOTER -->
    <Footer
      navLinks={{
        _1: [
          {
            title: "Daftar Genre",
            href: "/genres",
          },
          {
            title: "Jadwal Rilis",
            href: "/schedule",
          },
        ],
        _2: [
          {
            title: "Movies",
            href: "/movies",
          },
          {
            title: "Terpopuler",
            href: "/popular",
          },
        ],
      }}
    />
  </body>
</html>

<!-- FLOWBITE -->
<script
  is:inline
  src="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.js"
></script>

<script is:inline>
  // Initialize carousel when DOM is loaded
  document.addEventListener("DOMContentLoaded", function() {
    // Check if carousel elements exist
    const carouselEl = document.getElementById("default-carousel");
    if (carouselEl) {
      try {
        // Initialize carousel with Flowbite
        const carousel = new window.Carousel(carouselEl, {}, {
          defaultPosition: 1,
          interval: 3000
        });
        
        // Optional: Add custom navigation handling if needed
        const prevButton = document.querySelector("[data-carousel-prev]");
        const nextButton = document.querySelector("[data-carousel-next]");
        
        if (prevButton) {
          prevButton.addEventListener("click", () => carousel.prev());
        }
        
        if (nextButton) {
          nextButton.addEventListener("click", () => carousel.next());
        }
      } catch (error) {
        console.error("Error initializing carousel:", error);
      }
    }
  });
</script>

<script is:inline>
  // MENGATUR AWAL TEMA
  (function () {
    function isDark() {
      return (
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches
      );
    }

    function getTheme() {
      const theme = localStorage.getItem("theme");

      if (theme) return theme;

      return isDark() ? "dark" : "light";
    }

    function setTheme() {
      const htmlEl = document.documentElement;
      const moonIconEl = document.getElementById("icon-moon");
      const sunIconEl = document.getElementById("icon-sun");
      const theme = getTheme();

      if (moonIconEl && sunIconEl) {
        if (theme === "light") {
          sunIconEl.classList.remove("hidden");
          moonIconEl.classList.add("hidden");
        } else if (theme === "dark") {
          moonIconEl.classList.remove("hidden");
          sunIconEl.classList.add("hidden");
        }
      }

      htmlEl.dataset.theme = theme;
      htmlEl.style.colorScheme = theme;
      localStorage.setItem("theme", theme);
    }

    setTheme();
  })();

  // MENGATUR LOADING
  document.addEventListener("DOMContentLoaded", () => {
    const leluhurEl = document.getElementById("leluhur");
    const spinnerWrapperEl = document.getElementById("spinner-wrapper");

    if (leluhurEl && spinnerWrapperEl) {
      leluhurEl.classList.remove("hidden");
      leluhurEl.classList.add("flex");
      spinnerWrapperEl.classList.add("hidden");
    }
  });
</script>

<script is:inline>
  // MENGATUR PADDING TOP SESUAI DENGAN TINGGI NAVBAR
  function adjustMainPaddingTop() {
    const mainEl = document.getElementById("main");
    const navbarEl = document.getElementById("navbar");
    const paddingY = 12;

    if (mainEl && navbarEl) {
      const navbarHeight = navbarEl.offsetHeight;

      mainEl.style.paddingTop = `${navbarHeight + paddingY}px`;
      mainEl.style.paddingBottom = `${paddingY}px`;
    }
  }

  window.addEventListener("load", adjustMainPaddingTop);
  window.addEventListener("resize", adjustMainPaddingTop);
</script>
